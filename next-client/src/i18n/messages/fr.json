{
  "CV": "CV",
  "Projects": "Projets",
  "Project": "Projet",
  "MORE": "Plus",
  "Summary": "Résumé",
  "Samples": "Échantillons",
  "MEMAPP_DESCRIPTION": "Memapp est basé sur la technique de l'apprentissage par répétition espacée. Il s'agit d'un projet que j'ai créé à l'origine pour apprendre les kanjis japonais, car je n'étais pas satisfait des autres applications de répétition espacée disponibles à l'époque.",
  "SOCIAL_APP_SUMMARY": "Lobby integré avec Node Shooter",
  "MEMAPP_SUMMARY": "Un App d'apprentissage de répetition espacée",
  "ROOM__SUMMARY": "Paquetage pour Client & Backend pour aider à la communication entre des clients",
  "NS_SUMMARY": "Expérience de serveur de jeu sans boucle",
  "AP_SUMMARY": "Mise en œuvre de l'algorithme de test de planarité d'Auslander-Parter",
  "homepage": {
    "TITLE": "Ingénieur Logiciel Senior",
    "XP": "7½ ans d'expérience professionnelle",
    "LANGS": "Anglais (natif), Français (B2/C1)"
  },
  "cvpage": {
    "work_xp": "Expérience professionnelle",
    "EDUCATION_SECTION_TITLE": "Formation et certificats",
    "QUADRIVIA": "Contrat de 3 mois. J'ai aidé à faire passer un projet greenfield à la vitesse supérieure. J'ai commencé par le mettre à jour avec TS, Vite, Tailwind, ShadCN, React Router v7 et Storybook de CRA + JS. Ensuite, j'ai construit les fondations de « Qu for Clinicians » - une aide à l'IA pour les cliniciens afin de gérer les patients.",
    "PLENTIFIC": "J'ai travaillé sur une plateforme de marché pour les entrepreneurs et les agents immobiliers. J'ai mené plusieurs projets de la conception à la sortie, et j'ai eu une réputation pour remanier grands modules de code désordonné. J'ai utilisé souvent React Query, qui a remplacé Flux, simplifié le flux de données et réduit les recherches de données inutiles.",
    "FEEDR": "J'ai travaillé avec différents services, applications web et applications mobiles pour mettre en relation des fournisseurs de produits alimentaires avec des employeurs. Les tâches consistaient à gérer des projets, à effectuer des unit tests, à développer/améliorer des fonctionnalités et à effectuer des révisions de code.",
    "IMANAGE": "J'ai travaillé sur le frontend et devops. J'ai créé/amélioré des fonctionnalités permettant aux utilisateurs d'extraire des données à partir de millions de documents grâce à l'IA. J'ai également créé une solution personnalisée pour exécuter les tests dedans Cypress en parallèle, ce qui a permis d'accélérer considérablement le temps d'exécution de la suite de tests.",
    "SUPERCARERS": "J'ai développé des fonctionnalités pour une application de type marché où les personnes à la recherche d'aides-soignants peuvent être mises en relation avec des aides-soignants qui font des offres d'emploi. J'ai également créé des outils d'administration internes pour que notre personnel puisse gérer les clients et les aidants.",
    "D2R": "Développement des fonctionnalités et des fondements d'une application de recrutement (projet greenfield), destinée aux gens de métier.",
    "ANCOA": "Un rôle en C++ Full-stack. J'ai créé des algorithmes pour aider à détecter les comportements frauduleux sur les marchés boursiers, tout en contribuant à d'autres domaines du système, l'intégration des données, la gestion des bases de données, le système de construction sur linux, le front-end desktop et web, les clients d'API et certaines tâches en contact avec les clients et la participation à des événements Fintech. J'ai rejoint l'équipe web à temps plein pendant les cinq derniers mois et j'ai participé au développement de l'interface web avec AngularDart.",
    "APAK": "J'ai collaboré avec des analystes commerciaux pour améliorer et développer de nouvelles fonctionnalités.",
    "TCF": "Les compétences d'expréssion: NCLC 8 / B2+. La compréhension écrit: NCLC 7 / B2. La compréhension orale: NCLC 10 / C2.",
    "TCF_SUBTITLE": "Test de compétence linguistique en français; haut intermédiaire / avancé.",
    "JAN": "Janvier",
    "FEB": "Fevrier",
    "MAR": "Mars",
    "APR": "Avril",
    "MAY": "Mai",
    "JUN": "Juin",
    "JUL": "Julliet",
    "AUG": "Août",
    "SEP": "Septembre",
    "OCT": "Octobre",
    "NOV": "Novembre",
    "DEC": "Décembre"
  },
  "roomsummary": {
    "TITLE": "Room pattern",
    "TITLE_2": "Client Pooling",
    "TITLE_3": "Socket Handler",
    "TITLE_4": "Fonctionnalités",
    "LINE_1": "Le paquetage de Room est conçu pour être utilisé lorsque plusieurs clients communiquent entre eux via un serveur central. Habituellement, il y a beaucoup de configuration impliquée dans la création de telles situations, y compris la configuration du serveur websocket, la détermination du moment où le client est initialisé et prêt à recevoir l'état initial de la salle, et le nettoyage des ressources telles que les écouteurs d'événements, et si vous voulez mettre en œuvre des fonctionnalités plus avancées telles que la gestion de la déconnexion/reconnexion, alors les choses peuvent devenir désordonnées. Ce paquetage de Room est conçu pour simplifier grandement tout cela.",
    "LINE_2": "Toutes les fonctionnalités sont démontrées dans la",
    "LINE_3": "section échantillons",
    "LINE_4": "Le module côté serveur exporte une classe,",
    "LINE_5": "qui est conçu pour être étendue, et expose des Hooks, tandis que le",
    "LINE_6": "le module côté client",
    "LINE_7": "n'est qu'une simple interface avec le salon correspondant sur le serveur. Il y a 6 exemples qui vous guident dans l'utilisation du module de salle pour construire une salle de discussion. L'exemple 1 montre une configuration simple et une salle de discussion de base sans fonctionnalité. Les exemples 2 à 5 démontrent chacun une fonctionnalité différente : la fonctionnalité de déconnexion/reconnexion, les permissions, l'initialisation et les salles multiples du même type, tandis que l'exemple 6 démontre que toutes ces fonctionnalités fonctionnent ensemble.",
    "LINE_8": "Le module Room, côté serveur, stocke les clients par identifiant de session (Session ID), ce qui a pour effet secondaire de permettre à plusieurs clients utilisant des appareils différents de se connecter au même utilisateur, à moins que vous ne choisissiez de l'interdire dans",
    "LINE_9": "le hook d'autorisation",
    "LINE_10": "les objets sont créés pour représenter chaque session client et placés dans un pool de clients afin que chaque salle puisse partager la connexion client. Ce pool de clients n'est pas exposé au code utilisant le module. Les clients sont automatiquement retirés du pool s'ils ne sont plus dans les salles auxquelles il est destiné.",
    "LINE_11": "Le modèle Room utilise la classe SocketHandler, avec chaque",
    "LINE_12": "objet du serveur contenant un SocketHandler. Il s'agit d'une enveloppe pour le websocket brut et gère la fonctionnalité de déconnexion/reconnexion avec des pings/pongs, et émet « disconnect » lors de la déconnexion, où le SocketHandler côté client passe en mode reconnexion, et le SocketHandler émettra un événement « reconnect » lors de la reconnexion, avec la possibilité de réaffecter la référence du websocket brut à la nouvelle référence. Il suit également le style d'envoi de messages de socket.io en émettant un événement avec une charge utile, mais il est beaucoup plus léger. Le SocketHandler côté client peut gérer les cas où des messages sont envoyés pendant l'initialisation de la connexion via la fonction _enqueue."
  },
  "roomsamples": {
    "and": "and",
    "TITLE_1": "Sample 1: Basics",
    "TITLE_2": "Sample 2: Disconnecting & reconnecting",
    "TITLE_3": "Sample 3: Permissions",
    "TITLE_4": "Sample 4: Initialization hook",
    "TITLE_5": "Sample 5: Multiple rooms of the same type",
    "TITLE_6": "Sample 6: Everything together",
    "LINE_0": "There are 6 samples:",
    "LINE_1": "is a simple chat room example. If you're testing it on your own, use two separate browsers or a browser with incognito mode to log into multiple accounts. The server side room module doesn't allow multiple clients with the same session ID, stored in the Cookie header.",
    "LINE_2": "On the client side, the main part to take note of is the login() function. The rest is mostly DOM manipulation.",
    "LINE_3": "Above is an excerpt from the client sample. To create a client room you must always construct a new room and use",
    "LINE_4": "to request to join that room. If unsuccessful an exception will be thrown with err being a string, for the reason of the failure. Upon success, this is the time to initialize the client. Once you have finished initializing, call",
    "LINE_5": "as shown, which will notify the corresponding room on the server that you have finished initializing.",
    "LINE_6": "Now for the server side code,",
    "LINE_7": "Firstly it is important to note you must pass the http server to",
    "LINE_8": "and your session ID string name in the cookie, with the  sidCookie prop in the optional 2nd argument (default to 'sid').",
    "LINE_9": "This is the API endpoint which chatRoom.join('/chatroom') posts to in the client sample, and is where permission is requested to join the room. The",
    "LINE_10": "is demonstrated in sample 3, but if you do not implement it in your subclass, then permission will always be granted to join. Once permission to join has been granted, the client is added to the room in an uninitialized state and will not yet receive broadcasted messages. A useful hook",
    "LINE_11": "is called at this time too, demonstrated in sample 4. If your Room server is at a different URL to your API, or you want to specify a path, you can add a 'url' property onto the result object here. It can be a relative path or an absolute URL.",
    "LINE_12": "This is our subclass which extends Room, and implements only two client hooks. initClient is called when a client has called",
    "LINE_13": "from the first code sample on the client side, so you can safely assume here that the client is all initialized, and is a good place to set the listeners. The",
    "LINE_14": "hook is called when a client leaves, which can happen in a number of ways. Both",
    "LINE_15": "modules have a leave method, with the server-side module taking a client parameter. Also if you haven't implemented disconnect/reconnect functionality, a disconnect will automatically boot the player from the room.",
    "LINE_16": "The SocketHandler class (read about it in the",
    "LINE_17": "section) can detect disconnects and reconnects, and will try to reconnect when the connection is lost. The server-side Room module allows you to access",
    "LINE_18": "hooks, when this happens. To stop players being booted from the room upon disconnect, you must pass a reconnectTimeout property in the",
    "LINE_19": "as follows:",
    "LINE_20": "The parameter is in milliseconds. This will boot the client from the room if they have not reconnected within 15 seconds. It defaults to 0. Passing a negative number will disable the auto-boot completely. Now we can implement the disconnect and reconnect hooks as shown below.",
    "LINE_21": "That's all that's required to implement reconnect functionality on the server. For the client side, if a user has disconnected, a message will be printed in the chat room message area, as well as their name in the user list graying out. If they do not reconnect within 15 seconds they will leave, and if they reconnect before then, their name will go back to white with a reconnect message in the chat area. The only new events added to the chat room are shown below.",
    "LINE_22": "This sample demonstrates how to grant or refuse permission. Here, we refuse permission to join if the username entered is longer than 8 characters, or if its empty. To do this, all we need to do is implement the",
    "LINE_23": "hook on the server-side ChatRoom class, as shown below.",
    "LINE_24": "Now, if we enter no name, or a name longer than 8 characters, the error reason will be caught and printed to the developer console.",
    "LINE_25": "Here, the",
    "LINE_26": "hook is demonstrated, which is useful for a few reasons. First is that it allows us to broadcast that a user is joining, but not yet initialized, and second; it allows us to add a user to the room before the user has initialized, which can be useful if we have a user limit for our room, to avoid a conflict if two users request to join (see sample 3) at the same time for the last spot.",
    "LINE_27": "All that has been changed to the client from sample 1 is a new 'USER_INITIALIZED' websocket event for when the user has finished initializing, and the initialized() callback has been wrapped in a setTimeout to simulate initialization.",
    "LINE_28": "For the backend, things have been moved around a little. The user now gets created in onClientAccepted, and the 'USER_JOINED' has been moved to the new onClientAccepted hook, while being replaced with 'USER_INITIALIZED'.",
    "LINE_29": "Sample 5 demonstrates that you can easily join multiple rooms of the same type without having to worry about conflicting events on the server or client thanks to the way the rooms on the client/server precede events with an agreed unique ID behind the scenes. Here, the backend code has been changed to require logging in before joining a room, which no longer requires POST data to be sent in the join rooms' request, and we now have 4 chat-rooms, and require a parameter ID for the room you wish to join for the /chatroom POST endpoint.",
    "LINE_30": "For the client, when you login now, you are presented with 4 rooms which you can join. The code for the client is mostly the same apart from it has been factored into its own class (in",
    "LINE_31": "with the constructor taking an integer for the room number and there is a new renderJoinBtn function so each room can have its own join button. Normally web components should be used here, but the spec is too unstable at the moment, and using babel or React isn't worth it for such a small sample, so we just use a class which manipulates the DOM when it is constructed.",
    "LINE_32": "Sample 6 combines everything from the previous samples. The disconnect/reconnect functionality is more interesting too, since if you disconnect and only rejoin a single room, you can still be booted from the other rooms if you don't join back in time. Also the onJoinRequest is used to refuse permission to join a room if you're already a member of another 3. Upon attempting to join a 4th, you will be refused permission and a message will be printed to the developer console stating this."
  },
  "roomdocs": {
    "LINE_1": "Voir",
    "LINE_2": "API docs",
    "LINE_3": "sur Github"
  },
  "appage": {
    "LINE_1": "Ce projet comprend la conception et l'implémentation d'algorithmes sur les graphes, le principal étant l'algorithme de test de planarité d'Auslander-Parter. Les utilisateurs peuvent choisir de dessiner leurs propres graphes ou de sélectionner une liste de graphes de démonstration.",
    "LINE_2": "AVANT D'UTILISER LE LOGICIEL :",
    "LINE_3": "Cette implémentation de l'algorithme d'Auslander-Parter n'opère que sur les éléments suivants",
    "LINE_4": "les graphes biconnectés",
    "LINE_5": "Il faut donc s'assurer que tous les graphes dessinés sur mesure sont biconnectés. Il est possible d'adapter l'algorithme pour détecter et tester chaque composant biconnecté, mais cela dépasse le cadre du projet.",
    "LINE_6": "Dans le panneau de dessin des graphiques (ou le panneau après la sélection d'un graphique de démonstration)... Le texte des boutons peut être coupé sur certains appareils. L'ordre est le suivant : « Soumettre », « Retour », « Effacer » (dessin du graphique), « Aide » (pour les instructions de dessin).",
    "LINE_7": "Dans le panneau suivant (à partir du panneau de dessin du graphique), les 3 boutons en haut représentent le mode algorithme ; sélectionnez simplement AP-Alg si vous n'êtes pas sûr.",
    "LINE_8": "Télécharger :",
    "LINE_9": "Il a été testé avec Java 1.7 et 1.8. Les versions 1.6 et inférieures peuvent ou non fonctionner.",
    "LINE_10": "Note : Ce projet faisait à l'origine partie d'un diplôme de mathématiques et même s'il a été réécrit depuis, j'étais encore un développeur novice au moment de la réécriture, de sorte que certains choix de conception seront discutables pour les développeurs professionnels.",
    "LINE_11": "Voir le code sur Github",
    "LINE_12": "La section pertinente de ma thèse pour comprendre le fonctionnement de l'algorithme d'Auslander-Parter :"
  }
}
